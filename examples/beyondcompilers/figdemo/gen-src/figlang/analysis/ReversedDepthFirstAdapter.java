/* This file was generated by SableCC (http://www.sablecc.org/). */

package figlang.analysis;

import java.util.*;
import figlang.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPStart().apply(this);
        outStart(node);
    }

    public void inAStart(AStart node)
    {
        defaultIn(node);
    }

    public void outAStart(AStart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStart(AStart node)
    {
        inAStart(node);
        {
            List<PFigure> copy = new ArrayList<PFigure>(node.getFigure());
            Collections.reverse(copy);
            for(PFigure e : copy)
            {
                e.apply(this);
            }
        }
        outAStart(node);
    }

    public void inAFigure(AFigure node)
    {
        defaultIn(node);
    }

    public void outAFigure(AFigure node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFigure(AFigure node)
    {
        inAFigure(node);
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        if(node.getAttrList() != null)
        {
            node.getAttrList().apply(this);
        }
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAFigure(node);
    }

    public void inACommaAttrList(ACommaAttrList node)
    {
        defaultIn(node);
    }

    public void outACommaAttrList(ACommaAttrList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACommaAttrList(ACommaAttrList node)
    {
        inACommaAttrList(node);
        if(node.getAttrList() != null)
        {
            node.getAttrList().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getAttribute() != null)
        {
            node.getAttribute().apply(this);
        }
        outACommaAttrList(node);
    }

    public void inASingleAttrList(ASingleAttrList node)
    {
        defaultIn(node);
    }

    public void outASingleAttrList(ASingleAttrList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleAttrList(ASingleAttrList node)
    {
        inASingleAttrList(node);
        if(node.getAttribute() != null)
        {
            node.getAttribute().apply(this);
        }
        outASingleAttrList(node);
    }

    public void inAAttribute(AAttribute node)
    {
        defaultIn(node);
    }

    public void outAAttribute(AAttribute node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAttribute(AAttribute node)
    {
        inAAttribute(node);
        if(node.getLiteral() != null)
        {
            node.getLiteral().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAAttribute(node);
    }

    public void inAIntLiteral(AIntLiteral node)
    {
        defaultIn(node);
    }

    public void outAIntLiteral(AIntLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntLiteral(AIntLiteral node)
    {
        inAIntLiteral(node);
        if(node.getIntlit() != null)
        {
            node.getIntlit().apply(this);
        }
        outAIntLiteral(node);
    }

    public void inAStrLiteral(AStrLiteral node)
    {
        defaultIn(node);
    }

    public void outAStrLiteral(AStrLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStrLiteral(AStrLiteral node)
    {
        inAStrLiteral(node);
        if(node.getStrlit() != null)
        {
            node.getStrlit().apply(this);
        }
        outAStrLiteral(node);
    }
}
