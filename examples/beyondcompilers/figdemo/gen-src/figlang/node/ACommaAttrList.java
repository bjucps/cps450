/* This file was generated by SableCC (http://www.sablecc.org/). */

package figlang.node;

import figlang.analysis.*;

@SuppressWarnings("nls")
public final class ACommaAttrList extends PAttrList
{
    private PAttribute _attribute_;
    private TComma _comma_;
    private PAttrList _attrList_;

    public ACommaAttrList()
    {
        // Constructor
    }

    public ACommaAttrList(
        @SuppressWarnings("hiding") PAttribute _attribute_,
        @SuppressWarnings("hiding") TComma _comma_,
        @SuppressWarnings("hiding") PAttrList _attrList_)
    {
        // Constructor
        setAttribute(_attribute_);

        setComma(_comma_);

        setAttrList(_attrList_);

    }

    @Override
    public Object clone()
    {
        return new ACommaAttrList(
            cloneNode(this._attribute_),
            cloneNode(this._comma_),
            cloneNode(this._attrList_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseACommaAttrList(this);
    }

    public PAttribute getAttribute()
    {
        return this._attribute_;
    }

    public void setAttribute(PAttribute node)
    {
        if(this._attribute_ != null)
        {
            this._attribute_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._attribute_ = node;
    }

    public TComma getComma()
    {
        return this._comma_;
    }

    public void setComma(TComma node)
    {
        if(this._comma_ != null)
        {
            this._comma_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._comma_ = node;
    }

    public PAttrList getAttrList()
    {
        return this._attrList_;
    }

    public void setAttrList(PAttrList node)
    {
        if(this._attrList_ != null)
        {
            this._attrList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._attrList_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._attribute_)
            + toString(this._comma_)
            + toString(this._attrList_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._attribute_ == child)
        {
            this._attribute_ = null;
            return;
        }

        if(this._comma_ == child)
        {
            this._comma_ = null;
            return;
        }

        if(this._attrList_ == child)
        {
            this._attrList_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._attribute_ == oldChild)
        {
            setAttribute((PAttribute) newChild);
            return;
        }

        if(this._comma_ == oldChild)
        {
            setComma((TComma) newChild);
            return;
        }

        if(this._attrList_ == oldChild)
        {
            setAttrList((PAttrList) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
